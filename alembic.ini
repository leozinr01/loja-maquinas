# Uma configuração genérica de banco de dados único.

[alembic]
# caminho para scripts de migração.
# este é normalmente um caminho fornecido em POSIX (por exemplo, barras)
# formato, relativo ao token %(here)s, que se refere à localização deste
# arquivo ini
# sqlalchemy.url = driver://user:pass@localhost/dbname
script_location = alembic


# modelo usado para gerar nomes de arquivos de migração; o valor padrão é %%(rev)s_%%(slug)s
# Descomente a linha abaixo se desejar que os arquivos sejam precedidos por data e hora
# consulte https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# para todos os tokens disponíveis
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path caminho, será precedido por sys.path, se presente.
# padrão é o diretório de trabalho atual. Para múltiplos caminhos, o separador de caminho
# é definido por "path_separator" abaixo.
prepend_sys_path = .


# fuso horário a ser usado ao renderizar a data no arquivo de migração
# assim como o nome do arquivo.
# Se especificado, requer as bibliotecas python>=3.9 ou backports.zoneinfo e tzdata.
# Quaisquer dependências necessárias podem ser instaladas adicionando `alembic[tz]` aos requisitos do pip
# o valor da string é passado para ZoneInfo()
# deixe em branco para o horário local
# fuso horário =

# comprimento máximo de caracteres a serem aplicados ao campo "slug"
# truncate_slug_length = 40

# defina como 'true' para executar o ambiente durante
# o comando 'revision', independentemente da geração automática
# revision_environment = false

# defina como 'true' para permitir que arquivos .pyc e .pyo sem
# um arquivo .py de origem sejam detectados como revisões no
# diretório versions/
# sourceless = false

# especificação de localização da versão; O padrão é
# <script_location>/versions. Ao usar vários diretórios
# de versão, as revisões iniciais devem ser especificadas com --version-path.
# O separador de caminho usado aqui deve ser o especificado por "path_separator"
# abaixo.
# version_locations = %(here)s/bar:%(here)s/bat:%(here)s/alembic/versions

# path_separator; Indica qual caractere é usado para dividir listas de
# caminhos de arquivo, incluindo version_locations e prepend_sys_path dentro de arquivos
# configparser, como alembic.ini.
# O padrão renderizado em novos arquivos alembic.ini é "os", que usa os.pathsep
# para fornecer divisão de caminho dependente do sistema operacional.
#

# Observe que, para oferecer suporte a arquivos alembic.ini legados, este padrão NÃO
# ocorre se path_separator não estiver presente em alembic.ini. Se esta
# opção for omitida completamente, a lógica de fallback será a seguinte:
#
# 1. A análise da opção version_locations retorna ao uso da chave legada
# "version_path_separator", que, se ausente, retorna ao comportamento legado
# de divisão por espaços e/ou vírgulas.
# 2. A análise da opção prepend_sys_path retorna ao comportamento legado
# de divisão por espaços, vírgulas ou dois pontos.
#
# Os valores válidos para path_separator são:
#
# path_separator = :
# path_separator = ;
# path_separator = espaço
# path_separator = nova linha
#
# Use os.pathsep. Configuração padrão usada para novos projetos.
path_separator = os

# defina como 'true' para pesquisar arquivos de origem recursivamente
# em cada diretório "version_locations"
# novo na versão 1.10 do Alembic
# recursive_version_locations = false

# a codificação de saída usada quando os arquivos de revisão
# são gravados a partir de script.py.mako
# output_encoding = utf-8

# URL do banco de dados. Esta é consumida apenas pelo script env.py, mantido pelo usuário.
# outras formas de configurar URLs de banco de dados podem ser personalizadas dentro do arquivo env.py
# .
sqlalchemy.url = sqlite:///./loja.db



[post_write_hooks]
# post_write_hooks define scripts ou funções Python que são executados
# em scripts de revisão recém-gerados. Consulte a documentação para mais
# detalhes e exemplos

# formato usando "black" - use o executor console_scripts, contra o ponto de entrada "black"
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint com tentativas de correção usando "ruff" - use o executor do módulo, contra o módulo "ruff"
# hooks = ruff
# ruff.type = module
# ruff.module = ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Alternativamente, use o executor exec para executar um binário encontrado no seu PATH
# hooks = ruff
# ruff.type = exec
# ruff.executable = ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Configuração de log. Isso também é consumido apenas pelo script
# env.py mantido pelo usuário.
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
